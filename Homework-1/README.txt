GETTING STARTED:
===============
This section describes the preqrequisites, and contains instructions, to get the project up and running.

> Prerequisites
  -------------
  Python >= 3.6

> Usage
  -----
    The user can get a description of the options by using the command: $ python main.py --help

    User Options:

    -   --input-path
        Path to input file:
        (a) '*' refers to the blank tile in 8-Puzzle Problem.
        (b) First line -> Input State, Second line -> Goal State.
    -   --algorithm
        Search algorithm to run, choices are:
        (a) dfs: Depth-First Search
        (b) ids: Iterative-Deepening Search
        (c) astar1: A* algorithm with heuristic 1 (Number of misplaced tiles)
        (d) astar2: A* algorithm with heuristic 2 (Manhattan Distance)
    -   --depth-limit
        Depth limit for search traversal. Valid for Depth-First, Iterative-Deepening and A-Star Search algorithms.


> Sample Run Command
  ------------------
    $ python main.py --input-path eight_puzzle.txt --algorithm dfs --depth-limit 10


SAMPLE INPUT AND OUTPUT:
=======================
        Input-1:                                Output-1:
        ---------                               ---------
        *   2   3                               1   2   3
        1   7   5                               4   *   5
        4   6   8                               6   7   8

        Input-2:                                Output-2:
        ---------                               ---------
        8   1   3                               1   2   3
        4   *   2                               4   5   6
        7   6   5                               7   8   *


IMPLEMENTATION DETAILS:
======================
1. First and second lines in the input file 'eight_puzzle.txt' represent input state and goal state respectively.
   The sequence is separated by a space, and the blank tile is represented by a '*'.

2. For each state of the Eight Puzzle, the children states are generated by moving the blank tile (represented by '*') in the following order:
   'up', 'down', 'left', 'right'. Provided one of the actions are not possible, the order is still maintained for the remaining actions.

3. Membership test (to check if a particular node has been visited or not) is done with the help of the 'set' data structure.
   In Python, such a membership test is significantly faster than that of a list.

4. Priority queues are implemented with the help of the 'heap' data structure.


COMPARATIVE ANALYSIS:
====================
> For sample input-1 and sample output-1
  --------------------------------------
(a) Goal state can be reached in 4 moves with the A-Star algorithm using heuristic-1. 5 nodes are expanded in the process.
(b) Goal state can be reached in 4 moves with the A-Star algorithm using heuristic-2. 4 nodes are expanded in the process.


> For sample input-2 and sample output-2
  --------------------------------------
(a) A-Star algorithm fails for both the heuristics with a depth limit of 10.
(b) Upon increasing the depth limit to 13 with heuristic-1, the goal state is reached in 326 steps, i.e. when 326 nodes are expanded.
(c) Upon increasing the depth limit to 13 with heuristic-2, the goal state is reached in 76 steps.
(d) Goal state can be reached in 14 moves for both heuristic-1 and heuristic-2.


If each number in the eight-puzzle is exactly adjacent to the tile it is supposed to be in, both the heuristics, i.e. the number of misplaced tiles (heuristic-1) and Manhattan distance (heuristic-2) would be 8. In every other case, Manhattan distance for a misplaced tile is greater than 1, and thus, heuristic-2 is greater than 8. However, the maximum value of heuristic-1 is 8. Thus, heuristic-1 is always less than or equal to heuristic-2, i.e. heuristic-2 dominates over heuristic-1. This is also reflected in the A-star algorithm implementation above for both input-output samples, where heuristic-2 takes less steps to reach the goal state than heuristic-1.
